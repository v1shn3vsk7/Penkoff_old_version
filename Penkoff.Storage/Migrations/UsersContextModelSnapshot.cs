// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Penkoff.Storage;

#nullable disable

namespace Penkoff.Storage.Migrations
{
    [DbContext(typeof(UsersContext))]
    partial class UsersContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Penkoff.Storage.Entities.Card", b =>
                {
                    b.Property<long>("Pan")
                        .HasColumnType("bigint");

                    b.Property<long>("CVV")
                        .HasColumnType("bigint");

                    b.Property<string>("ExpirationDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Pan");

                    b.HasIndex("UserId");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("Penkoff.Storage.Entities.DollarAccount", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<long>("Balance")
                        .HasColumnType("bigint");

                    b.HasKey("UserId");

                    b.ToTable("DollarAccounts");
                });

            modelBuilder.Entity("Penkoff.Storage.Entities.EuroAccount", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<long>("Balance")
                        .HasColumnType("bigint");

                    b.HasKey("UserId");

                    b.ToTable("EuroAccounts");
                });

            modelBuilder.Entity("Penkoff.Storage.Entities.Operation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Operations");
                });

            modelBuilder.Entity("Penkoff.Storage.Entities.RubleAccount", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<long>("Balance")
                        .HasColumnType("bigint");

                    b.HasKey("UserId");

                    b.ToTable("RubleAccounts");
                });

            modelBuilder.Entity("Penkoff.Storage.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Penkoff.Storage.Entities.Card", b =>
                {
                    b.HasOne("Penkoff.Storage.Entities.User", "User")
                        .WithMany("Cards")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Penkoff.Storage.Entities.DollarAccount", b =>
                {
                    b.HasOne("Penkoff.Storage.Entities.User", "User")
                        .WithOne("DollarAccount")
                        .HasForeignKey("Penkoff.Storage.Entities.DollarAccount", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Penkoff.Storage.Entities.EuroAccount", b =>
                {
                    b.HasOne("Penkoff.Storage.Entities.User", "User")
                        .WithOne("EuroAccount")
                        .HasForeignKey("Penkoff.Storage.Entities.EuroAccount", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Penkoff.Storage.Entities.Operation", b =>
                {
                    b.HasOne("Penkoff.Storage.Entities.User", "User")
                        .WithMany("Operations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Penkoff.Storage.Entities.RubleAccount", b =>
                {
                    b.HasOne("Penkoff.Storage.Entities.User", "User")
                        .WithOne("RubleAccount")
                        .HasForeignKey("Penkoff.Storage.Entities.RubleAccount", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Penkoff.Storage.Entities.User", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("DollarAccount")
                        .IsRequired();

                    b.Navigation("EuroAccount")
                        .IsRequired();

                    b.Navigation("Operations");

                    b.Navigation("RubleAccount")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
